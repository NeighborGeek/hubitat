// Original Tasmota driver developed by Brett Sheleski
// Ported to Hubitat by dkkohler
// Modified to work with the tasmota firmware for a Tasmota Power Strip by damondins
// Hubitat driver for controlling the tasmota firmware for a Tasmota Power Strip
// Version 1.0.0 - 9/5/2019

metadata {
	definition(name: "Tasmota Power Strip", namespace: "damondins", author: "damondins") {
		capability "Switch"
		capability "Refresh"        
        
        command "USB"
        command "AllPlugsOff"
        command "AllPlugsOn"
        command "Plug1"
        command "Plug2"
        command "Plug3"
        command "Plug4"
    }

	preferences {		
		section("Sonoff Host") {
            input(name: "ipAddress", type: "string", title: "IP Address", displayDuringSetup: true, required: true)
			input(name: "port", type: "number", title: "Port", displayDuringSetup: true, required: true, defaultValue: 80)
		}

		section("Authentication") {
			input(name: "username", type: "string", title: "Username", displayDuringSetup: false, required: false)
			input(name: "password", type: "password", title: "Password (sent cleartext)", displayDuringSetup: false, required: false)
		}
	}
}

def parse(String description) {
	def message = parseLanMessage(description)
	def isParsed = false;

	// parse result from current formats
	def resultJson = {}
	if (message?.json) {
		// current json data format
		resultJson = message.json
        //log.debug resultJson
	}  
    
	// determine switch state
    if ((resultJson?."POWER1" in ["ON", 1, "1"])) {
		setSwitchState("usb", true)
    }
    else if ((resultJson?."POWER1" in ["OFF", 1, "0"])) {
        setSwitchState("usb", false)
    }

    if ((resultJson?."POWER2" in ["ON", 1, "1"])) {
		setSwitchState("plug1", true)
    }
    else if ((resultJson?."POWER2" in ["OFF", 1, "0"])) {
        setSwitchState("plug1", false)
    }

    if ((resultJson?."POWER3" in ["ON", 1, "1"])) {
		setSwitchState("plug2", true)
    }
    else if ((resultJson?."POWER3" in ["OFF", 1, "0"])) {
        setSwitchState("plug2", false)
    }

    if ((resultJson?."POWER4" in ["ON", 1, "1"])) {
		setSwitchState("plug3", true)
    }
    else if ((resultJson?."POWER4" in ["OFF", 1, "0"])) {
        setSwitchState("plug3", false)
    }

    if ((resultJson?."POWER5" in ["ON", 1, "1"])) {
		setSwitchState("plug4", true)
    }
    else if ((resultJson?."POWER5" in ["OFF", 1, "0"])) {
        setSwitchState("plug4", false)
    }
}


def setSwitchState(strName, Boolean on) {
	sendEvent(name: "$strName", value: on ? "on" : "off")
}

def on() {
	sendCommand("Power1", "On")
}

def off() {
	sendCommand("Power1", "Off")
}

def AllPlugsOff() {
    sendCommand("backlog", "Power1%20off%3BPower2%20off%3BPower3%20off%3BPower4%20off%3BPower5%20off")
}

def AllPlugsOn() {
    sendCommand("backlog", "Power1%20on%3BPower2%20on%3BPower3%20on%3BPower4%20on%3BPower5%20on")
}

def USB() {
    sendCommand("Power1", "toggle")
}

def Plug1() {
    sendCommand("Power2", "toggle")
}

def Plug2() {
    sendCommand("Power3", "toggle")
}

def Plug3() {
    sendCommand("Power4", "toggle")
}

def Plug4() {
    sendCommand("Power5", "toggle")
}

def poll() {
	sendCommand("State", null)
}

def schedrefresh() {
    refreshrate = "10"
	refreshrateint = Integer.parseInt(refreshrate)
	runIn(refreshrateint, poll)
	//log.debug refreshrateint
}

def refresh() {
	sendCommand("State", null)
    schedrefresh()
}

private def sendCommand(String command, payload) {
    sendCommand(command, payload.toString())
}

private def sendCommand(String command, String payload) {
	//log.debug "sendCommand(${command}:${payload}) to device at $ipAddress:$port"

	if (!ipAddress || !port) {
		log.warn "aborting. ip address or port of device not set"
		return null;
	}
	def hosthex = convertIPtoHex(ipAddress)
	def porthex = convertPortToHex(port)

	def path = "/cm"
	if (payload){
		path += "?cmnd=${command}%20${payload}"
	}
	else{
		path += "?cmnd=${command}"
	}

	if (username){
		path += "&user=${username}"
		if (password){
			path += "&password=${password}"
		}
	}

	def result = new hubitat.device.HubAction(
		method: "GET",
		path: path,
		headers: [
			HOST: "${ipAddress}:${port}"
		]
	)
    schedrefresh()
    return result
}

private String convertIPtoHex(ipAddress) { 
	String hex = ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join()
	return hex
}

private String convertPortToHex(port) {
	String hexport = port.toString().format('%04x', port.toInteger())
	return hexport
}