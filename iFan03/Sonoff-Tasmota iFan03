// Hubitat driver for controlling Sonoff iFan03
// Original Tasmota driver developed by Brett Sheleski
// Ported to Hubitat by dkkohler
// Modified to work with the iFan03 by damondins
// Version 1.0.2 - Added Buzzer control
// Version 1.0.1 - Updated Refresh and Refresh interval
// Version 1.0.0 - Inital Release


metadata {
	definition(name: "Sonoff-Tasmota iFan03", namespace: "damondins", author: "damondins") {
		capability "Actuator"
		capability "Refresh"
        capability "Switch"
        capability "Switch Level"
        //capability "Configuration"
   
	}

	preferences {		
		section("Alerts") {
            input name: "alertBeep", type: "bool", title: "Alert Tone", required:true, defaultValue:true
        }
		section("Sonoff Host") {
            input(name: "ipAddress", type: "string", title: "IP Address", displayDuringSetup: true, required: true)
			input(name: "port", type: "number", title: "Port", displayDuringSetup: true, required: true, defaultValue: 80)
		}

		section("Authentication") {
			input(name: "username", type: "string", title: "Username", displayDuringSetup: false, required: false)
			input(name: "password", type: "password", title: "Password (sent cleartext)", displayDuringSetup: false, required: false)
		}
	}
}

def parse(String description) {
	def message = parseLanMessage(description)
	def isParsed = false;

	// parse result from current formats
	def resultJson = {}
	if (message?.json) {
		// current json data format
		resultJson = message.json
        //log.debug resultJson
	}

	// determine switch state
	if ((resultJson?."FanSpeed" in ["1", 1, "1"])) {
		setSwitchState(true)
        setFanSpeedState("33")
        //log.debug "Fanspeed 1"
	}
	else if ((resultJson?."FanSpeed" in ["2", 2, "2"])) {
		setSwitchState(true)
        setFanSpeedState("66")
        //log.debug "Fanspeed 2"        
	}
	else if ((resultJson?."FanSpeed" in ["3", 3, "3"])) {
		setSwitchState(true)
        setFanSpeedState("99")
        //log.debug "Fanspeed 3"        
	}
	else if ((resultJson?."FanSpeed" in ["0", 0, "0"])) {
		setSwitchState(false)
        setFanSpeedState("0")
        //log.debug "Fanspeed off"        
	}
	else {
		//log.error "Unable to parse Fan state"
	}
    
}

def setSwitchState(Boolean on) {
	sendEvent(name: "switch", value: on ? "on" : "off")
}

def setFanSpeedState(value) {
    sendEvent(name: "level", value: "$value")
}

def setToneState(Boolean on) {
    sendEvent(name: "tone", value: on ? "on" : "off")
}


def setLevel(value, duration=1) {
    //log.debug value 
    if (value == 0) {
   		setSwitchState(false)
        setFanSpeedState("0")
        setToneState(alertBeep)
        if (alertBeep) {
            sendCommand("Buzzer%201%206%3B%20FanSpeed%200", null)
        }
        else {
            sendCommand("FanSpeed%200", null)
        }
    }
    else if (value > 0 && value <= 33) {
		setSwitchState(true)
        setFanSpeedState("33")
        setToneState(alertBeep)
        if (alertBeep) {
            sendCommand("Buzzer%201%3B%20FanSpeed%201", null)
        }
        else {
            sendCommand("FanSpeed%201", null)
        }
    }
    else if (value > 33 && value <= 66) {
		setSwitchState(true)
        setFanSpeedState("66")
        setToneState(alertBeep)
        if (alertBeep) {
            sendCommand("Buzzer%202%3B%20FanSpeed%202", null)
        }
        else {
            sendCommand("FanSpeed%202", null)
        }
    }
    else if (value > 66 && value <= 100) {
		setSwitchState(true)
        setFanSpeedState("99")
        setToneState(alertBeep)
        if (alertBeep) {
            sendCommand("Buzzer%203%3B%20FanSpeed%203", null)
        }
        else {
            sendCommand("FanSpeed%203", null)
        }
    }
}

def push() {
	sendCommand("Power", "Toggle")
}

def on() {
    setSwitchState(true)
    setFanSpeedState("1")
    setToneState(alertBeep)
    if (alertBeep) {
        sendCommand("Buzzer%201%3B%20FanSpeed%201", null)
        //sendCommand("Fanspeed", "1")
    }
    else {
        sendCommand("FanSpeed%201", null)
    }
}

def off() {
	setSwitchState(false)
    setFanSpeedState("off")
    setToneState(alertBeep)
    if (alertBeep) {
        sendCommand("Buzzer%201%206%3B%20FanSpeed%200", null)
	    //sendCommand("Fanspeed", "0")
    }
    else {
        sendCommand("FanSpeed%200", null)
    }
}

def poll() {
	sendCommand("power2", "refresh")
}

def schedrefresh() {
    refreshrate = "10"
	refreshrateint = Integer.parseInt(refreshrate)
	runIn(refreshrateint, poll)
	//log.debug refreshrateint
}

def refresh() {
	sendCommand("power2", "refresh")    	
    schedrefresh()
}

private def sendCommand(String command, payload) {
    sendCommand(command, payload.toString())
}

private def sendCommand(String command, String payload) {
	//log.debug "sendCommand(${command}:${payload}) to device at $ipAddress:$port"

	if (!ipAddress || !port) {
		log.warn "aborting. ip address or port of device not set"
		return null;
	}
	def hosthex = convertIPtoHex(ipAddress)
	def porthex = convertPortToHex(port)

	def path = "/cm"
//	if (payload != null){
//		path += "?cmnd=${command}%20${payload}"
//	}
//	else{
	if (payload == "refresh"){
		path += "?cmnd=${command}"
        //log.debug "Run Refresh"
	}
	else{
		path += "?cmnd=backlog%20${command}"
        log.debug "sendCommand(${command}:${payload}) to device at $ipAddress:$port"
	}

	if (username){
		path += "&user=${username}"
		if (password){
			path += "&password=${password}"
		}
	}

	def result = new hubitat.device.HubAction(
		method: "GET",
		path: path,
		headers: [
			HOST: "${ipAddress}:${port}"
		]
	)
    schedrefresh()
	return result
}

private String convertIPtoHex(ipAddress) { 
	String hex = ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join()
	return hex
}

private String convertPortToHex(port) {
	String hexport = port.toString().format('%04x', port.toInteger())
	return hexport
}
